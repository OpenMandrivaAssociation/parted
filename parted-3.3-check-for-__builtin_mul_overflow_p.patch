diff -Naur parted-3.3/configure.ac parted-3.3.tpg/configure.ac
--- parted-3.3/configure.ac	2019-10-13 12:09:04.619187103 +0000
+++ parted-3.3.tpg/configure.ac	2019-10-13 12:09:49.667250810 +0000
@@ -56,6 +56,18 @@
                   subdir-objects])
 AM_SILENT_RULES([yes]) # make --enable-silent-rules the default.
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 AC_CANONICAL_HOST
 case "$host_os" in
 	linux*|uclinux*) OS=linux ;;
diff -Naur parted-3.3/lib/intprops.h parted-3.3.tpg/lib/intprops.h
--- parted-3.3/lib/intprops.h	2019-10-10 23:02:53.000000000 +0000
+++ parted-3.3.tpg/lib/intprops.h	2019-10-13 12:11:39.073413963 +0000
@@ -227,14 +227,12 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
@@ -320,7 +318,7 @@
   _GL_BINARY_OP_OVERFLOW (a, b, _GL_ADD_OVERFLOW)
 #define INT_SUBTRACT_OVERFLOW(a, b) \
   _GL_BINARY_OP_OVERFLOW (a, b, _GL_SUBTRACT_OVERFLOW)
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define INT_NEGATE_OVERFLOW(a) INT_SUBTRACT_OVERFLOW (0, a)
 #else
 # define INT_NEGATE_OVERFLOW(a) \
diff -Naur parted-3.3/lib/xalloc-oversized.h parted-3.3.tpg/lib/xalloc-oversized.h
--- parted-3.3/lib/xalloc-oversized.h	2019-08-09 20:17:50.000000000 +0000
+++ parted-3.3.tpg/lib/xalloc-oversized.h	2019-10-13 12:14:09.321654043 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
